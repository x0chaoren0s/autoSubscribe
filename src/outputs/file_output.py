import os
import shutil
from typing import List, Dict, Any
from datetime import datetime

class FileOutput:
    """文件输出处理器"""
    
    def __init__(self, logger=None, output_dir="results/output", backup_dir="results/output/backup", config=None):
        self.logger = logger
        self.output_dir = output_dir
        self.backup_dir = backup_dir
        self.config = config or {}
        
    def save(self, site: str, proxies: List[Dict[str, Any]], config: Dict = None) -> None:
        """保存代理到文件"""
        if not proxies:
            return
            
        # 确保目录存在
        os.makedirs(self.output_dir, exist_ok=True)
        
        # 生成文件头注释
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        header = [
            "# Proxy list generated by AutoSubscribe",
            f"# Timestamp: {timestamp}",
            f"# Target site: {site}",
            f"# Total proxies: {len(proxies)}",
            "#",
            ""  # 空行分隔注释和内容
        ]
        
        # 保存到文件
        output_file = os.path.join(self.output_dir, f"{site}.txt")
        with open(output_file, "w", encoding="utf-8") as f:
            # 写入文件头
            f.write("\n".join(header))
            # 写入代理链接
            for proxy in proxies:
                f.write(f"{proxy['raw_link']}\n")
                
    def backup_results(self) -> None:
        """备份现有结果"""
        if not os.path.exists(self.output_dir):
            return
            
        # 创建备份目录
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = os.path.join(self.backup_dir, timestamp)
        os.makedirs(backup_path, exist_ok=True)
        
        # 复制文件
        for file in os.listdir(self.output_dir):
            if file.endswith(".txt"):
                src = os.path.join(self.output_dir, file)
                dst = os.path.join(backup_path, file)
                shutil.copy2(src, dst)